#include <WiFi.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <HTTPClient.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h> 

// Kh·ªüi t·∫°o WebSocket server
WebSocketsServer webSocket = WebSocketsServer(8080);


// Kh·ªüi t·∫°o LCD1602 v·ªõi ƒë·ªãa ch·ªâ I2C (th∆∞·ªùng l√† 0x27 ho·∫∑c 0x3F)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// üü° WiFi
const char* ssid = "phamtuu";
const char* password = "123456789";
WiFiServer server(5000);
WiFiClient client;

// ƒê·ªãnh nghƒ©a ch√¢n servo v√† kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Servo b·∫Øn 
#define SERVO 5
Servo doorServo;


// üü¢ Servo quay h∆∞·ªõng
Servo servoX, servoY;
const int servoXPin = 13;
const int servoYPin = 33;
int currentAngleX = 90;
int currentAngleY = 60;

// üî¥ C·∫£m bi·∫øn si√™u √¢m
#define TRIG_PIN 2
#define ECHO_PIN 4

// üü† Servo b·∫Øn
#define FIRE_SERVO_PIN 5
#define LED 14
Servo FireServo;

// c√≤i 
#define SIREN_PIN 19  // Ch√¢n GPIO ƒëi·ªÅu khi·ªÉn transistor

unsigned long lastMoveTime = 0;  // Th·ªùi gian chuy·ªÉn ƒë·ªông cu·ªëi c√πng

unsigned long lastObjectDetectedTime = 0;
bool isObjectDetected = false;  // Bi·∫øn ƒë·ªÉ theo d√µi vi·ªác ph√°t hi·ªán v·∫≠t

unsigned long openStartTime = 0;
const unsigned long openDuration = 3000;
bool openCommandReceived = false;


Servo servoScan;
const int servoScanPin = 27; // Ch·ªçn 1 ch√¢n digital ch∆∞a d√πng
int ultrasonicDistance;

// üì© D·ªØ li·ªáu t·ª´ socket
String input = "";
bool isFiring = false;


// H√†m x·ª≠ l√Ω s·ª± ki·ªán WebSocket
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
    switch(type) {
        case WStype_DISCONNECTED:
            Serial.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED:
            Serial.printf("[%u] Connected!\n", num);
            break;
        case WStype_TEXT:


            Serial.printf("[%u] Received text: %s\n", num, payload);
   
              // T·∫°o b·ªô ph√¢n t√≠ch JSON
            StaticJsonDocument<200> doc;
            DeserializationError error = deserializeJson(doc, payload);

            if (error) {
                Serial.print(F("‚ùå L·ªói ph√¢n t√≠ch JSON: "));
                Serial.println(error.f_str());
                return;
            }

            String command = doc["command"];  // L·∫•y gi√° tr·ªã c·ªßa kh√≥a "command"
            Serial.printf("üì© L·ªánh nh·∫≠n ƒë∆∞·ª£c: %s\n", command.c_str());
            
            if (command == "ArrowUp") {
                Serial.println("Arduino: Di chuy·ªÉn l√™n");
                // Di chuy·ªÉn servoY l√™n (gi·∫£m g√≥c)
                int newAngleY = currentAngleY - 10;
                newAngleY = constrain(newAngleY, 0, 180);
                moveServoSmooth(servoY, currentAngleY, newAngleY);
            }
            else if (command == "ArrowDown") {
                 Serial.println("Arduino: Di chuy·ªÉn xu·ªëng");
                // Di chuy·ªÉn servoY xu·ªëng (tƒÉng g√≥c)
                int newAngleY = currentAngleY + 10;
                newAngleY = constrain(newAngleY, 0, 180);
                moveServoSmooth(servoY, currentAngleY, newAngleY);
            }
            else if (command == "ArrowLeft") {
                Serial.println("Arduino: Di chuy·ªÉn sang tr√°i");
                // Di chuy·ªÉn servoX sang tr√°i (gi·∫£m g√≥c)
                int newAngleX = currentAngleX - 10;
                newAngleX = constrain(newAngleX, 0, 180);
                moveServoSmooth(servoX, currentAngleX, newAngleX);
            }
            else if (command == "ArrowRight") {
                Serial.println("Arduino: Di chuy·ªÉn sang ph·∫£i");
                // Di chuy·ªÉn servoX sang ph·∫£i (tƒÉng g√≥c)
                int newAngleX = currentAngleX + 10;
                newAngleX = constrain(newAngleX, 0, 180);
                moveServoSmooth(servoX, currentAngleX, newAngleX);
            }
            else if (command == "Space") {
                Serial.println("Arduino: B·∫Øn");
                // X·ª≠ l√Ω b·∫Øn
                openCommandReceived = true;
                openStartTime = millis();
            }
            else if (command == "STOP") {
                Serial.println("Arduino: D·ª´ng di chuy·ªÉn");
                // Kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m v√¨ servo s·∫Ω gi·ªØ nguy√™n v·ªã tr√≠
            }
            break;
    }
}

void setup() {


    Serial.begin(115200);

    // WiFi setup
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ WiFi connected");
    Serial.println(WiFi.localIP());
    server.begin();

    // Kh·ªüi t·∫°o WebSocket
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);
    Serial.println("WebSocket server started");

    // Servo setup
    servoX.attach(servoXPin);
    servoY.attach(servoYPin);
    FireServo.attach(FIRE_SERVO_PIN);
    servoX.write(currentAngleX);
    servoY.write(currentAngleY);
    FireServo.write(0);  // Ban ƒë·∫ßu ƒë√≥ng

    // servo cho  b·∫Øn 
    doorServo.attach(SERVO);

    // C·∫£m bi·∫øn
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);

    // LED 
    pinMode(LED, OUTPUT);
    digitalWrite(LED, LOW);

    // c√≤i 
    pinMode(SIREN_PIN, OUTPUT);
    digitalWrite(SIREN_PIN, LOW);  // B·∫Øt ƒë·∫ßu v·ªõi c√≤i t·∫Øt

    lcd.init(); // Kh·ªüi ƒë·ªông LCD
    lcd.clear();
    lcd.backlight(); // B·∫≠t ƒë√®n n·ªÅn LCD
    // Hi·ªÉn th·ªã chu·ªói d√†i tr√™n LCD
    String longText = "    san sang       chien dau !!!";
    displayLongText(longText);

    Serial.println("LCD Displayed");


    servoScan.attach(servoScanPin); // G·∫Øn servo qu√©t


}

int calculateDistance() {
  digitalWrite(TRIG_PIN, LOW); 
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); 
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH); 
  int distance = duration * 0.034 / 2;
  return distance;
}


void displayLongText(String text) {
    lcd.clear();
    int maxLength = 16;  // M·ªói d√≤ng LCD c√≥ t·ªëi ƒëa 16 k√Ω t·ª±
    int textLength = text.length();
    
    // V√≤ng l·∫∑p qua t·ª´ng ph·∫ßn c·ªßa chu·ªói
    for (int i = 0; i < textLength; i += maxLength) {
        String part = text.substring(i, i + maxLength); // C·∫Øt chu·ªói th√†nh ƒëo·∫°n con
        lcd.setCursor(0, i / maxLength);  // Di chuy·ªÉn con tr·ªè ƒë·∫øn d√≤ng ti·∫øp theo
        lcd.print(part);  // In ph·∫ßn c·ªßa chu·ªói v√†o LCD
    }
}

// üìè ƒêo kho·∫£ng c√°ch
float readDistanceCM() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    long duration = pulseIn(ECHO_PIN, HIGH, 10000); // Gi·∫£m timeout xu·ªëng 10ms
    float distance = duration * 0.034 / 2;
    return duration > 0 ? distance : -1; // Tr·∫£ v·ªÅ -1 n·∫øu l·ªói
}

// üìå Di chuy·ªÉn servo m∆∞·ª£t
void moveServoSmooth(Servo& servo, int& currentAngle, int targetAngle) {
    int step = (targetAngle > currentAngle) ? 2 : -2; // TƒÉng b∆∞·ªõc l√™n 5
    while (abs(currentAngle - targetAngle) > 1) {
        currentAngle += step;
        servo.write(currentAngle);
        delay(1); // Gi·∫£m delay xu·ªëng 1ms
    }
    currentAngle = targetAngle;
    servo.write(currentAngle);
}


// C·∫•u tr√∫c JSON ƒë·ªÉ g·ª≠i th√¥ng tin v·ªÅ kho·∫£ng c√°ch v√† g√≥c
void sendRadarData(int angle, int distance) {
    // T·∫°o ƒë·ªëi t∆∞·ª£ng JSON
    StaticJsonDocument<200> doc;
    doc["radar"]["goc"] = angle;
    doc["radar"]["kc"] = distance;

    // Chuy·ªÉn ƒë·ªëi t∆∞·ª£ng JSON th√†nh chu·ªói
    String output;
    serializeJson(doc, output);

    // G·ª≠i d·ªØ li·ªáu qua WebSocket
    webSocket.sendTXT(0, output);  // 0 l√† ch·ªâ s·ªë c·ªßa client (ƒëi·ªÅu ch·ªânh n·∫øu c√≥ nhi·ªÅu client)

    // In ra console ƒë·ªÉ ki·ªÉm tra
    Serial.println(output);
}






void loop() {
    unsigned long currentTime = millis();

    // üì∂ X·ª≠ l√Ω k·∫øt n·ªëi t·ª´ client socket (∆∞u ti√™n)
    if (!client || !client.connected()) {
        client = server.available();
        if (client) {
            Serial.println("üñ•Ô∏è Client da ket noi");
            input = "";
        }
    }


    // X·ª≠ l√Ω WebSocket
    webSocket.loop();

    if (client && client.connected()) {
        while (client.available()) {
            char c = client.read();
            if (c == '\n') {
                input.trim();
                  if (input == "open") {
                      openCommandReceived = true;
                      openStartTime = millis();
                  } else  if (input.length() > 2 && input.indexOf(',') != -1) {
                      Serial.printf("üïí Nh·∫≠n l√∫c: %lu ms\n", millis());
                      int commaIndex = input.indexOf(',');
                      int offsetX = input.substring(0, commaIndex).toInt();
                      int offsetY = input.substring(commaIndex + 1).toInt();

                      // Hi·ªáu ch·ªânh d·ª±a tr√™n FOV (60¬∞ ngang, 45¬∞ d·ªçc)
                      int targetAngleX = currentAngleX + (offsetX * 60.0 / 640.0);
                      int targetAngleY = currentAngleY + (offsetY * 45.0 / 480.0);

                      targetAngleX = constrain(targetAngleX, 0, 180);
                      targetAngleY = constrain(targetAngleY, 0, 180);

                      Serial.printf("üéØ Offset X: %d, Y: %d | Goc X: %d, Y: %d\n", offsetX, offsetY, targetAngleX, targetAngleY);


                      String longText = "   Phat hien ke      dich";
                      displayLongText(longText);

                      digitalWrite(LED, HIGH); // B·∫≠t ƒë√®n LED khi chuyen dong

                          if (abs(targetAngleX - currentAngleX) > 1) {
                              moveServoSmooth(servoX, currentAngleX, targetAngleX);
                          }
                          if (abs(targetAngleY - currentAngleY) > 1) {
                              moveServoSmooth(servoY, currentAngleY, targetAngleY);
                          }

                      currentAngleX = targetAngleX;
                      currentAngleY = targetAngleY;

                      lastMoveTime = millis();  // C·∫≠p nh·∫≠t th·ªùi gian khi c√≥ chuy·ªÉn ƒë·ªông
                      lastObjectDetectedTime = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian ph√°t hi·ªán v·∫≠t
                      isObjectDetected = true;  // ƒê√°nh d·∫•u ƒë√£ ph√°t hi·ªán v·∫≠t

                  }else {
                          Serial.println("‚ö†Ô∏è D·ªØ li·ªáu socket kh√¥ng h·ª£p l·ªá: " + input);
                        }
                  input = "";
            } else {
                input += c;
              }
        }
    }

    

        // N·∫øu kh√¥ng ph√°t hi·ªán v·∫≠t trong 10 gi√¢y, t·∫Øt ƒë√®n v√† hi·ªÉn th·ªã "Kh√¥ng ph√°t hi·ªán v·∫≠t"
        if (isObjectDetected && currentTime - lastObjectDetectedTime > 10000) {
            digitalWrite(LED, LOW);  // T·∫Øt ƒë√®n LED
            String noDetectionText = "Khong phat hien      ke dich";
            displayLongText(noDetectionText);  // C·∫≠p nh·∫≠t LCD v·ªõi th√¥ng b√°o "Kh√¥ng ph√°t hi·ªán v·∫≠t"
            isObjectDetected = false;  // ƒê√°nh d·∫•u kh√¥ng c√≤n ph√°t hi·ªán v·∫≠t
        }


        // c√≤i k√™u 
        if (isObjectDetected) {
            for (int i = 0; i < 3; i++) {
                digitalWrite(SIREN_PIN, HIGH);  // B·∫≠t c√≤i
                delay(250);                     // Ch·ªù 250ms
                digitalWrite(SIREN_PIN, LOW);   // T·∫Øt c√≤i
                delay(250);                     // Ch·ªù 250ms
            }
        } else {
            digitalWrite(SIREN_PIN, LOW);       // ƒê·∫£m b·∫£o t·∫Øt c√≤i n·∫øu kh√¥ng ph√°t hi·ªán
        }


       // x·ª≠ l√Ω b·∫Øn 
        if (openCommandReceived && (millis() - openStartTime < openDuration)) {
        doorServo.write(0); // Open s√∫ng
          
        } else {
          doorServo.write(90); // Close s√∫ng
        
          openCommandReceived = false;
        }


    // Qu√©t t·ª´ tr√°i sang ph·∫£i
    for (int i = 15; i <= 165; i++) {
        servoScan.write(i);
        delay(30); // Th·ªùi gian tr·ªÖ khi di chuy·ªÉn servo

        int distance = calculateDistance();  // ƒêo kho·∫£ng c√°ch
        Serial.print(i);
        Serial.print(",");
        Serial.print(distance);
        Serial.print(".");

        // G·ª≠i d·ªØ li·ªáu radar v·ªõi delay
        sendRadarData(i, distance);
        delay(500);  // Th√™m delay gi·ªØa c√°c l·∫ßn g·ª≠i (500ms)
    }

    // Qu√©t t·ª´ ph·∫£i sang tr√°i
    for (int i = 165; i >= 15; i--) {
        servoScan.write(i);
        delay(30); // Th·ªùi gian tr·ªÖ khi di chuy·ªÉn servo

        int distance = calculateDistance();  // ƒêo kho·∫£ng c√°ch
        Serial.print(i);
        Serial.print(",");
        Serial.print(distance);
        Serial.print(".");

        // G·ª≠i d·ªØ li·ªáu radar v·ªõi delay
        sendRadarData(i, distance);
        delay(500);  // Th√™m delay gi·ªØa c√°c l·∫ßn g·ª≠i (500ms)
    }

    

}